<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE FBType SYSTEM "http://www.holobloc.com/xml/LibraryElement.dtd">
<FBType Comment="Basic Function Block Type" Name="BasicPID">
  <Identification Standard="61499-2"/>
  <VersionInfo Author="4DIAC-IDE" Date="2011-12-09" Organization="4DIAC-Consortium" Version="0.0"/>
  <InterfaceList>
    <EventInputs>
      <Event Comment="Normal Execution Request" Name="REQ" Type="Event">
        <With Var="fSetpointValue"/>
        <With Var="fActualValue"/>
        <With Var="bReset"/>
        <With Var="fCtrlCycleTime"/>
        <With Var="fTv"/>
        <With Var="fTd"/>
        <With Var="fKp"/>
        <With Var="fTn"/>
      </Event>
    </EventInputs>
    <EventOutputs>
      <Event Comment="Execution Confirmation" Name="CNF" Type="Event">
        <With Var="fCtrlOutput"/>
        <With Var="nErrorStatus"/>
      </Event>
    </EventOutputs>
    <InputVars>
      <VarDeclaration Name="fSetpointValue" Type="LREAL"/>
      <VarDeclaration Name="fActualValue" Type="LREAL"/>
      <VarDeclaration Name="bReset" Type="BOOL"/>
      <VarDeclaration Name="fCtrlCycleTime" Type="LREAL"/>
      <VarDeclaration Name="fTv" Type="LREAL"/>
      <VarDeclaration Name="fTd" Type="LREAL"/>
      <VarDeclaration Name="fKp" Type="LREAL"/>
      <VarDeclaration Name="fTn" Type="LREAL"/>
    </InputVars>
    <OutputVars>
      <VarDeclaration Name="fCtrlOutput" Type="LREAL"/>
      <VarDeclaration Name="nErrorStatus" Type="UINT"/>
    </OutputVars>
  </InterfaceList>
  <BasicFB>
    <InternalVars>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fE" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fE_1" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fY" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fY_1" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fYP" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fYI" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fYI_1" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fYD" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fYD_1" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="1" Name="bInit" Type="BOOL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="bIsIPart" Type="BOOL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="bIsDPart" Type="BOOL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fDi" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fDd" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fCd" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fCtrlCycleTimeOld" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fKpOld" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fTnOld" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fTvOld" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="fTdOld" Type="LREAL"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="0" Name="nERR_NOERROR" Type="UINT"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="1" Name="nERR_INVALIDPARAM" Type="UINT"/>
      <VarDeclaration Comment="Internal Variable" InitialValue="2" Name="nERR_INVALIDCYCLETIME" Type="UINT"/>
    </InternalVars>
    <ECC>
      <ECState Comment="Initial State" Name="START" x="435.0" y="290.0"/>
      <ECState Comment="Normal execution" Name="REQ" x="215.0" y="750.0">
        <ECAction Algorithm="REQ" Output="CNF"/>
      </ECState>
      <ECTransition Comment="" Condition="REQ" Destination="REQ" Source="START" x="550.0" y="600.0"/>
      <ECTransition Comment="" Condition="1" Destination="START" Source="REQ" x="215.0" y="425.0"/>
    </ECC>
    <Algorithm Comment="Normally executed algorithm" Name="REQ">
      <ST Text="(* init necessary? *)&#10;IF (fCtrlCycleTime &lt;&gt; fCtrlCycleTimeOld) OR (fKp &lt;&gt; fKpOld) OR (fTn &lt;&gt; fTnOld) OR (fTv &lt;&gt; fTvOld) OR (fTd &lt;&gt; fTdOld) THEN&#10;&#9;&#9;bInit := TRUE;&#10;END_IF;&#10;(* controller init *)&#10;IF bInit OR bReset THEN&#10;&#9;&#9;(* reset internal and external variables *)&#10;&#9;&#9;fE := fE_1 := 0.0;&#10;&#9;&#9;fY := fY_1 := 0.0;&#10;&#9;&#9;fYP := 0.0;&#10;&#9;&#9;fYI := fYI_1 := 0.0;&#10;&#9;&#9;fYD := fYD_1 := 0.0;&#10;&#9;&#9;fCtrlOutput := 0.0;&#10;&#9;&#9;bIsIPart := FALSE;&#10;&#9;&#9;bIsDPart := FALSE;&#10;&#9;&#9;fCtrlOutput := 0.0;&#10;&#9;&#9;nErrorStatus := nERR_NOERROR;&#10;&#9;&#9;(* check cycle time parameter: (CycleTime &gt; 0 AND CycleTme &lt;= 60) *)&#10;&#9;&#9;IF ( fCtrlCycleTime &lt;= 0) THEN&#10;&#9;&#9;&#9;nErrorStatus := nERR_INVALIDCYCLETIME;&#10;&#9;&#9;&#9;RETURN;&#10;&#9;&#9;END_IF;&#10;&#9;&#9;(* check controller parameters: (Tn, Tv, Td &gt;= 0) *)&#10;&#9;&#9;IF ( (fTn &lt; 0) OR (fTv &lt; 0) OR (fTd &lt; 0) ) THEN&#10;&#9;&#9;&#9;nErrorStatus := nERR_INVALIDPARAM;&#10;&#9;&#9;&#9;RETURN;&#10;&#9;&#9;END_IF;&#10;&#9;&#9;(* I-part *)&#10;&#9;&#9;IF( fTn &gt; 0.0 ) THEN&#10;&#9;&#9;&#9;fDi := (fKp * fCtrlCycleTime) / (2.0 * fTn);&#10;&#9;&#9;&#9;bIsIPart := TRUE;&#10;&#9;&#9;ELSE&#10;&#9;&#9;&#9;fDi := 0.0;&#10;&#9;&#9;&#9;bIsIPart := FALSE;&#10;&#9;&#9;END_IF;&#10;&#9;&#9;(* D-part *)&#10;&#9;&#9;IF( fTv &gt; 0.0 ) AND (fTd &gt; 0.0) THEN&#10;&#9;&#9;&#9;fDd := (fKp * fTv) / (fTd + fCtrlCycleTime / 2.0);&#10;&#9;&#9;&#9;fCd := (fTd - fCtrlCycleTime / 2.0) / (fTd + fCtrlCycleTime / 2.0);&#10;&#9;&#9;&#9;bIsDPart := TRUE;&#10;&#9;&#9;ELSE&#10;&#9;&#9;&#9;fDd := 0.0;&#10;&#9;&#9;&#9;fCd := 0.0;&#10;&#9;&#9;&#9;bIsDPart := FALSE;&#10;&#9;&#9;END_IF;&#10;&#9;&#9;(* reset *)&#10;&#9;&#9;IF bReset THEN&#10;&#9;&#9;&#9;RETURN;&#10;&#9;&#9;END_IF&#10;&#9;&#9;(* set internal init flag *)&#10;&#9;&#9;fCtrlCycleTimeOld := fCtrlCycleTime;&#10;&#9;&#9;fKpOld := fKp;&#10;&#9;&#9;fTnOld := fTn;&#10;&#9;&#9;fTvOld := fTv;&#10;&#9;&#9;fTdOld := fTd;&#10;&#9;&#9;bInit := FALSE;&#10;&#9;END_IF;&#10;&#9;(* 3. save old variable *)&#10;&#9;fE_1 := fE;&#10;&#9;fY_1 := fY;&#10;&#9;fYI_1 := fYI;&#10;&#9;fYD_1 := fYD;&#10;&#9;(* 4. set error/deviation input *)&#10;&#9;fE := fSetpointValue - fActualValue;&#10;&#9;(* 5. YP-part *)&#10;&#9;fYP := fKp * fE;&#10;&#9;(* 6. YI-part *)&#10;&#9;IF bIsIPart THEN&#10;&#9;&#9;fYI := fYI_1 + fDi * (fE + fE_1);&#10;&#9; (* normal I-part calculation *)&#10;&#9;ELSE&#10;&#9;&#9;fYI := 0.0;&#10;&#9;END_IF;&#10;&#9;(* 7. YD-part *)&#10;&#9;IF bIsDPart THEN&#10;&#9;&#9;fYD := fCd * fYD_1 + fDd * (fE - fE_1);&#10;&#9;ELSE&#10;&#9;&#9;fYD := 0.0;&#10;&#9;END_IF;&#10;&#9;(* 8. Ysum = YP + YI + YD *)&#10;&#9;fY := fYP + fYI + fYD;&#10;&#9;(* 10. set controller output *)&#10;&#9;fCtrlOutput := fY;"/>
    </Algorithm>
  </BasicFB>
  <Service Comment="Basic Function Block Type" LeftInterface="left interface" RightInterface="right interface">
    <ServiceSequence Name="request">
      <ServiceTransaction>
        <InputPrimitive Event="REQ" Interface="left interface"/>
        <OutputPrimitive Event="CNF" Interface="left interface" Parameters="fCtrlOutput=[0.0,]; nErrorStatus=[0,2]"/>
      </ServiceTransaction>
    </ServiceSequence>
  </Service>
</FBType>
